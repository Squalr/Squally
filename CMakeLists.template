#/****************************************************************************
# Copyright (c) 2013-2014 cocos2d-x.org
# Copyright (c) 2015-2017 Chukong Technologies Inc.
#
# http://www.cocos2d-x.org
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:

# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.

# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.
# ****************************************************************************/

#/****************************************************************************
# DO NOT EDIT THE CMakeLists.txt DIRECTLY! PLEASE EDIT THE CMakeLists.template!
# TO UPDATE THE FILE LIST, RUN GenerateCMakeFiles.py!
#/****************************************************************************

cmake_minimum_required(VERSION 3.1)

set(APP_NAME Squally)

set(CMAKE_OSX_DEPLOYMENT_TARGET "10.9" CACHE STRING "Minimum OS X deployment version")
project(${APP_NAME} VERSION 1.0.1)
set(PRODUCT_NAME ${APP_NAME})
set(EXECUTABLE_NAME Launcher)

set(COCOS2DX_ROOT_PATH ${CMAKE_CURRENT_SOURCE_DIR}/cocos2d)
set(CMAKE_MODULE_PATH ${COCOS2DX_ROOT_PATH}/cmake/Modules/)

set(USE_COCOS_PREBUILT OFF)

include(CocosBuildSet)
if(NOT USE_COCOS_PREBUILT)
    add_subdirectory(${COCOS2DX_ROOT_PATH}/cocos ${ENGINE_BINARY_PATH}/cocos/core)
endif()

# add external dependencies
add_subdirectory(${PROJECT_SOURCE_DIR}/external)

# configure header
configure_file(${PROJECT_SOURCE_DIR}/Source/Config.h.in ${CMAKE_BINARY_DIR}/Config.h)

# record sources, headers, resources...
set(GAME_SOURCE)
set(GAME_HEADER)

set(GAME_RES_FOLDER
    "${CMAKE_CURRENT_SOURCE_DIR}/Resources"
    )
if(APPLE OR WINDOWS)
    cocos_mark_multi_resources(common_res_files RES_TO "Resources" FOLDERS ${GAME_RES_FOLDER})
endif()

include_directories(
        ${CMAKE_CURRENT_SOURCE_DIR}/Source/
        ${COCOS2DX_ROOT_PATH}/cocos/audio/include/
)

# add cross-platforms source files
list(APPEND GAME_SOURCE
    # This is generated by GenerateCMakeFiles.py:
    {{ CMAKE_GENRATE_CPP }}
)

# add cross-platforms header files
list(APPEND GAME_HEADER
    # This is generated by GenerateCMakeFiles.py:
    {{ CMAKE_GENRATE_H }}
)

if(LINUX)
    list(APPEND GAME_SOURCE
         proj.linux/main.cpp
         )
elseif(WINDOWS)
    list(APPEND GAME_HEADER
         proj.win32/main.h
         proj.win32/resource.h
         )
    list(APPEND GAME_SOURCE
         proj.win32/main.cpp
         proj.win32/game.rc
         ${common_res_files}
         )
elseif(APPLE)
    if(MACOSX)
        set(APP_UI_RES
            proj.ios_mac/mac/Icon.icns
            proj.ios_mac/mac/Info.plist
            )
        list(APPEND GAME_SOURCE
             proj.ios_mac/mac/main.cpp
             proj.ios_mac/mac/Prefix.pch
             ${APP_UI_RES}
             )
    endif()
    list(APPEND GAME_SOURCE ${common_res_files})
endif()

# mark app complie info and libs info
set(APP_SRC
    ${GAME_SOURCE}
    ${GAME_HEADER}
)

cocos_build_app(${APP_NAME}
    APP_SRC
        "${APP_SRC}"
    DEPEND_COMMON_LIBS
        breakpad_client
        cocos2d
)

string(REPLACE "$<CONFIG>" "${CMAKE_BUILD_TYPE}" CMAKE_RUNTIME_OUTPUT_DIRECTORY ${APP_BIN_DIR})

if(APPLE)
	SET (CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/${APP_NAME}.app/Contents/MacOS)
	
    set_target_properties(${APP_NAME} PROPERTIES RESOURCE "${APP_UI_RES}")
    if(MACOSX)
        set_target_properties(${APP_NAME} PROPERTIES
            MACOSX_BUNDLE_INFO_PLIST "${CMAKE_CURRENT_SOURCE_DIR}/proj.ios_mac/mac/Info.plist"
        )
        # Launcher executable
        add_executable(Launcher
            proj.ios_mac/mac/Launcher/LauncherAppDelegate.mm
            proj.ios_mac/mac/Launcher/main.mm
            # hack until we fix the breakpad utf library vs the cocos one
            external/breakpad/src/common/convert_UTF.c
        )
        target_include_directories(Launcher PRIVATE ${CMAKE_BINARY_DIR})
        target_link_libraries(Launcher PRIVATE ${COCOA_LIBRARY} breakpad_client AFNetworking)
        target_compile_options(Launcher PUBLIC -fobjc-arc)

        # Launcher output directory is Squally Bundle
        get_target_property(APP_NAME_OUTPUT_DIRECTORY ${APP_NAME} RUNTIME_OUTPUT_DIRECTORY)
        set_target_properties(Launcher PROPERTIES
            RUNTIME_OUTPUT_DIRECTORY
                ${APP_NAME_OUTPUT_DIRECTORY}/${APP_NAME}.app/Contents/MacOS
        )
		
		configure_file(${CMAKE_CURRENT_SOURCE_DIR}/cocos2d/external/steam/redistributable_bin/osx32/libsteam_api.dylib ${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/libsteam_api.dylib COPYONLY)
    endif()
elseif(LINUX)
    find_package(PkgConfig)
    pkg_check_modules(GTKMM gtkmm-3.0)

    add_executable(Launcher
        proj.linux/Launcher.cpp
        # hack until we fix the breakpad utf library vs the cocos one
        external/breakpad/src/common/convert_UTF.c
    )
    target_include_directories(Launcher PUBLIC ${GTKMM_INCLUDE_DIRS} ${CMAKE_BINARY_DIR})
    target_link_libraries(Launcher breakpad_client pthread ${GTKMM_LIBRARIES})
    set_target_properties(Launcher PROPERTIES
        RUNTIME_OUTPUT_DIRECTORY
            ${APP_BIN_DIR}
    )
	
	if(CMAKE_SIZEOF_VOID_P EQUAL 4)
		configure_file(${CMAKE_CURRENT_SOURCE_DIR}/cocos2d/external/steam/redistributable_bin/linux32/libsteam_api.so ${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/libsteam_api.so COPYONLY)
	elseif(CMAKE_SIZEOF_VOID_P EQUAL 8)
		configure_file(${CMAKE_CURRENT_SOURCE_DIR}/cocos2d/external/steam/redistributable_bin/linux64/libsteam_api.so ${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/libsteam_api.so COPYONLY)
	endif()
	
elseif(WINDOWS)
    add_executable(Launcher WIN32
        proj.win32/Launcher.cpp
        # hack until we fix the breakpad utf library vs the cocos one
        external/breakpad/src/common/convert_UTF.c
        proj.win32/game.rc
    )
    target_compile_features(Launcher PUBLIC cxx_std_11)
    target_include_directories(Launcher PUBLIC ${CMAKE_BINARY_DIR})
    target_link_libraries(Launcher breakpad_client)
    set_target_properties(Launcher PROPERTIES
        RUNTIME_OUTPUT_DIRECTORY
            ${APP_BIN_DIR}
    )
	
	configure_file(${CMAKE_CURRENT_SOURCE_DIR}/cocos2d/external/steam/redistributable_bin/steam_api.dll ${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/steam_api.dll COPYONLY)
	configure_file(${CMAKE_CURRENT_SOURCE_DIR}/cocos2d/external/steam/redistributable_bin/win64/steam_api64.dll ${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/steam_api64.dll COPYONLY)
	
    cocos_copy_target_dll(${APP_NAME} COPY_TO ${APP_BIN_DIR})
endif()

if(LINUX OR WINDOWS)
    cocos_copy_target_res(${APP_NAME} COPY_TO ${APP_RES_DIR} FOLDERS ${GAME_RES_FOLDER})
endif()

configure_file(${CMAKE_CURRENT_SOURCE_DIR}/.itch.toml ${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/.itch.toml COPYONLY)
configure_file(${CMAKE_CURRENT_SOURCE_DIR}/steam_appid.txt ${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/steam_appid.txt COPYONLY)
